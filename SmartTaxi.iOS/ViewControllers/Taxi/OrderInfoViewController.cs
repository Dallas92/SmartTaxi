// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using SmartTaxi.Models;
using System.Drawing;

namespace SmartTaxi.iOS
{
	public partial class OrderInfoViewController : UIViewController
	{
		public Order order;
		public float CurOffset;

		public OrderInfoViewController (IntPtr handle) : base (handle)
		{
		}

		public OrderInfoViewController (Order order)
		{
			//this.order = order;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			AppDelegate.AddGestureRecognizer (this.View);

			switch (this.order.Status) {
			case 0:
				_img1.Image = UIImage.FromBundle ("Menu/order-new.png");
				_text1.Text = "НОВЫЙ";
				break;
			case 1:
				_img1.Image = UIImage.FromBundle ("Menu/order-waiting.png");
				_text1.Text = "В ОЖИДАНИИ";
				break;
			case 2:
				_img1.Image = UIImage.FromBundle ("Menu/order-accepted.png");
				_text1.Text = "ПРИНЯТ";
				break;
			case 3:
				_img1.Image = UIImage.FromBundle ("Menu/order-cancel.png");
				_text1.Text = "ОТМЕНЕН";
				break;
			}

			_text1.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,25f);
			_timerLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,25f);
			_timerLabel.Text = "30сек";


			_fromLb.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_toTextx.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_timeText.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_superLab.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);

			_priceLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);


			_1img.Image = UIImage.FromBundle ("Order/1.png");
			_2img.Image = UIImage.FromBundle ("Order/2.png");
			_3img.Image = UIImage.FromBundle ("Order/3.png");
			_4img.Image = UIImage.FromBundle ("Order/4.png");

			_priceTextField.Layer.BackgroundColor = AppDelegate.AppColorHalfYellow.CGColor;
			_priceTextField.Layer.BorderWidth = 2;
			_priceTextField.Layer.BorderColor = AppDelegate.AppColorYellow.CGColor;
			_priceTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,20f);

			if (this.order.Status != 0) {
				_priceTextField.Enabled = false;
			}

			_priceTextField.ShouldBeginEditing = t => {
				CurOffset = _scrollView.ContentOffset.Y;
				this._scrollView.SetContentOffset (new PointF (0, 250), true);
				return true;
			};

			_priceTextField.ShouldEndEditing = t => {
				this._scrollView.SetContentOffset (new PointF (0, CurOffset), true);
				return true;
			};

			_priceTextField.Ended += (sender, e) => {
				this._scrollView.SetContentOffset (new PointF (0, CurOffset), true);
			};

			_trackingButton.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,20f);
			_trackingButton.Layer.BackgroundColor = UIColor.Clear.CGColor;
			_trackingButton.Layer.BorderWidth = 2;
			_trackingButton.Layer.BorderColor = AppDelegate.AppColorYellow.CGColor;
			_trackingButton.TouchUpInside += (sender, e) => {
				var vController = (AppDelegate.Storyboard.InstantiateViewController ("TrackingViewController") as TrackingViewController);
				vController.Mode = 1;
				AppDelegate.Order = order;
				this.NavigationController.PushViewController (vController, false);
			};
			_trackingButton.SetTitle ("КАРТА", UIControlState.Normal);

			_offerButton.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,20f);
			_offerButton.Layer.BackgroundColor = UIColor.Clear.CGColor;
			_offerButton.Layer.BorderWidth = 2;
			_offerButton.Layer.BorderColor = AppDelegate.AppColorYellow.CGColor;
			_offerButton.TouchUpInside += (sender, e) => {
				if(this.order.Status==0){
					if(!string.IsNullOrWhiteSpace(_priceTextField.Text)){
						AppDelegate.API.Taxi.SetPrice (this.order.OrderId, int.Parse(_priceTextField.Text));
						Console.WriteLine ("Set price for order at: " + DateTime.Now.ToString ());
					}else{
						var alert = new UIAlertView("Уведомление","Вы должны указать цену",null,"ок");
						alert.Show();
					}
				}else{
					var alert = new UIAlertView("Уведомление","Вы уже предложили свою цену",null,"ок");
					alert.Show();
				}
			};

			_fromLb.Text = this.order.FromAddress;
			_toTextx.Text = this.order.ToAddress;
			_superLab.Text = !string.IsNullOrEmpty(this.order.Comment)?this.order.Comment:"Без примечания";



			string hText = "";
			if (this.order.Minutes != 0) {
				int hour = this.order.Minutes / 60;
				switch (hour) {
				case 0:
					hText=" часов";
					break;
				case 1:
					hText=" час";
					break;
				case 2:
					hText=" часа";
					break;
				}
			}

			_timeText.Text = (this.order.Minutes/60) + hText + " " + (this.order.Minutes%60).ToString() + " мин.";
		}
	}
}

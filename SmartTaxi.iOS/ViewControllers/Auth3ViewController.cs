// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Collections.Generic;
using System.Drawing;
using SmartTaxi.Models;
using MonoTouch.CoreAnimation;
using MonoTouch.ObjCRuntime;

namespace SmartTaxi.iOS
{
	public partial class Auth3ViewController : UIViewController
	{
		public Auth3ViewController (IntPtr handle) : base (handle)
		{
		}

		private UIImagePickerController imagePicker;
		private List<MenuItem> menuItems;
		private string ImagePath;
		private List<PickerModelItem> Colors;
		private PickerModelItem SelColor;

		private List<PickerModelItem> Cities;
		private PickerModelItem SelCity;


		public int ActiveView = 0;

		public override void ViewDidLoad ()
		{
			Colors = new List<PickerModelItem> {
				new PickerModelItem{Id="черный",Name="черный"},
				new PickerModelItem{Id="серый",Name="серый"},
				new PickerModelItem{Id="белый",Name="белый"},
				new PickerModelItem{Id="голубой",Name="голубой"},
			};
			SelColor = new PickerModelItem{ Id = "черный", Name = "черный" };


			Cities = new List<PickerModelItem> {
				new PickerModelItem{Id="447055bf-db72-4313-af71-e7a84ae2ccd3",Name="Костанай"},
				new PickerModelItem{Id="1",Name="Алматы"},
				new PickerModelItem{Id="2",Name="Астана"},
				new PickerModelItem{Id="4",Name="Караганда"},
			};
			SelCity = new PickerModelItem{ Id = "447055bf-db72-4313-af71-e7a84ae2ccd3", Name = "Костанай" };



			menuItems = new List<MenuItem> { 
				new MenuItem{ Name = "Авторизация", ImageName = "id.png", Color = UIColor.FromRGB (255, 216, 0) },
				new MenuItem{ Name = "Забыли пароль", ImageName = "forget.png", Color = UIColor.FromRGB (255, 204, 0) },
				new MenuItem{ Name = "Регистрация", ImageName = "register.png", Color = UIColor.FromRGB (255, 185, 1) }
			};

			AppDelegate.AddGestureRecognizer (this.View);
			#region 1 section
			(_view1.Subviews [0] as UIView).BackgroundColor = this.menuItems [0].Color;
			((_view1.Subviews [0] as UIView).Subviews[0] as UIImageView).Image = UIImage.FromBundle ("Menu/" + this.menuItems [0].ImageName);
			((_view1.Subviews [0] as UIView).Subviews[0] as UIImageView).ContentMode = UIViewContentMode.ScaleToFill;
			((_view1.Subviews [0] as UIView).Subviews[1] as UITextField).Text = this.menuItems [0].Name;
			((_view1.Subviews [0] as UIView).Subviews[1] as UITextField).Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,25f);
			((_view1.Subviews [0] as UIView).Subviews[1] as UITextField).TextColor = UIColor.FromRGB (50, 50, 50);
			AttachAnimation (_view1, 0);


			_1phoneLb.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);

			_1phoneTF.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_1phoneTF.Layer.BorderWidth = 1;
			_1phoneTF.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			_1passLb.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);

			_1passTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_1passTextField.Layer.BorderWidth = 1;
			_1passTextField.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			_1okButton.SetImage (UIImage.FromBundle ("Common/ok.png"), UIControlState.Normal);
			_1okButton.TouchUpInside += (sender, e) => {
				LoginData data = AppDelegate.API.Taxi.Login (_1phoneTF.Text, _1passTextField.Text);

				if(data.Meta.Code == 200){
					if(data.Data.NeedToConfirmPhone){
						this.NavigationController.PushViewController ((AppDelegate.Storyboard.InstantiateViewController ("RetryCodeViewController") as UIViewController), true);
						return;
					}

					AppDelegate.Taxi =  AppDelegate.API.Taxi.GetProfile ();
					AppDelegate.isTaxi = true;
					this.NavigationController.PushViewController ((AppDelegate.Storyboard.InstantiateViewController ("TaxistsViewController") as UIViewController), true);
				}else{
					var alert = new UIAlertView("Ошибка","Проверьте корректность ваших данных",null,"ok");
					alert.Show();
				}
			};

			_1phoneTF.Text = "77713241540";
			_1passTextField.Text = "пароль";
			_1passTextField.SecureTextEntry = true;
			#endregion

			#region 2 section
			(_view2.Subviews [0] as UIView).BackgroundColor = this.menuItems [1].Color;
			((_view2.Subviews [0] as UIView).Subviews[0] as UIImageView).Image = UIImage.FromBundle ("Menu/" + this.menuItems [1].ImageName);
			((_view2.Subviews [0] as UIView).Subviews[0] as UIImageView).ContentMode = UIViewContentMode.ScaleToFill;
			((_view2.Subviews [0] as UIView).Subviews[1] as UITextField).Text = this.menuItems [1].Name;
			((_view2.Subviews [0] as UIView).Subviews[1] as UITextField).Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,25f);
			((_view2.Subviews [0] as UIView).Subviews[1] as UITextField).TextColor = UIColor.FromRGB (50, 50, 50);
			AttachAnimation (_view2, 1);



			_2phoneLb.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);

			_2phoneTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_2phoneTextField.Layer.BorderWidth = 1;
			_2phoneTextField.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			_2extraLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,15f);

			_2okButton.SetImage (UIImage.FromBundle ("Common/ok.png"), UIControlState.Normal);
			_2okButton.TouchUpInside += (sender, e) => {
				AppDelegate.API.Taxi.ResetPassword(_2phoneTextField.Text);
			};
			#endregion

			#region 3 section
			(_view3.Subviews [0] as UIView).BackgroundColor = this.menuItems [2].Color;
			((_view3.Subviews [0] as UIView).Subviews[0] as UIImageView).Image = UIImage.FromBundle ("Menu/" + this.menuItems [2].ImageName);
			((_view3.Subviews [0] as UIView).Subviews[0] as UIImageView).ContentMode = UIViewContentMode.ScaleToFill;
			((_view3.Subviews [0] as UIView).Subviews[1] as UITextField).Text = this.menuItems [2].Name;
			((_view3.Subviews [0] as UIView).Subviews[1] as UITextField).Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,25f);
			((_view3.Subviews [0] as UIView).Subviews[1] as UITextField).TextColor = UIColor.FromRGB (50, 50, 50);



			_3InfoLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);

			_3nameLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3nameTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_3nameTextField.Layer.BorderWidth = 1;
			_3nameTextField.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			_3surnameLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3surnameTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_3surnameTextField.Layer.BorderWidth = 1;
			_3surnameTextField.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			_3phoneLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3phoneTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_3phoneTextField.Layer.BorderWidth = 1;
			_3phoneTextField.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			_3passLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3passTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_3passTextField.Layer.BorderWidth = 1;
			_3passTextField.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			_3passAgainLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3passAgainTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_3passAgainTextField.Layer.BorderWidth = 1;
			_3passAgainTextField.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			_3cityLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3cityTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_3cityTextField.Layer.BorderWidth = 1;
			_3cityTextField.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			SetupCityPicker();

			_3otherButton.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,20f);
			_3otherButton.Layer.BackgroundColor = UIColor.Clear.CGColor;
			_3otherButton.Layer.BorderWidth = 2;
			_3otherButton.Layer.BorderColor = AppDelegate.AppColorYellow.CGColor;
			_3otherButton.TouchUpInside += (sender, e) => {

			};

			_3markaLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3markaTF.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_3markaTF.Layer.BorderWidth = 1;
			_3markaTF.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			_3modelLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3modelTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_3modelTextField.Layer.BorderWidth = 1;
			_3modelTextField.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			_3autonumberLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3autonumberTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_3autonumberTextField.Layer.BorderWidth = 1;
			_3autonumberTextField.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			_3colorLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3colorTextField.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,18f);
			_3colorTextField.Layer.BorderWidth = 1;
			_3colorTextField.Layer.BorderColor = UIColor.FromRGB (255,216,0).CGColor;

			SetupColorPicker();



			_3carImage.Image = UIImage.FromBundle("ribaphoto.png");
			_3photoLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3uploadButton.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,20f);
			_3uploadButton.Layer.BackgroundColor = UIColor.Clear.CGColor;
			_3uploadButton.Layer.BorderWidth = 2;
			_3uploadButton.Layer.BorderColor = AppDelegate.AppColorYellow.CGColor;
			_3uploadButton.TouchUpInside += (sender, e) => {
				PhotoFromGallery();
			};

			_3agreenmentLabel.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,16f);
			_3readButton.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,20f);
			_3readButton.Layer.BackgroundColor = UIColor.Clear.CGColor;
			_3readButton.Layer.BorderWidth = 2;
			_3readButton.Layer.BorderColor = AppDelegate.AppColorYellow.CGColor;
			_3readButton.TouchUpInside += (sender, e) => {

			};
			_3agreeButton.Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,20f);
			_3agreeButton.Layer.BackgroundColor = UIColor.Clear.CGColor;
			_3agreeButton.Layer.BorderWidth = 2;
			_3agreeButton.Layer.BorderColor = AppDelegate.AppColorYellow.CGColor;
			_3agreeButton.TouchUpInside += (sender, e) => {
				if(_3agreeButton.Tag==0){
					_3agreeButton.BackgroundColor = AppDelegate.AppColorHalfYellow;
					_3agreeButton.TintColor=UIColor.White;
					_3agreeButton.Tag=1;
				}else{
					_3agreeButton.BackgroundColor = UIColor.Clear;
					_3agreeButton.Tag=0;
				}
			};

			_okButton.SetImage (UIImage.FromBundle ("Common/ok.png"), UIControlState.Normal);
			_okButton.TouchUpInside += (sender, e) => {

				//VALIDATION
				string msg = "";

				if(string.IsNullOrEmpty(_3nameTextField.Text)){msg +="Введите имя\n";}
				if(string.IsNullOrEmpty(_3surnameTextField.Text)){msg +="Введите фамилию\n";}
				if(string.IsNullOrEmpty(_3phoneTextField.Text)){msg +="Введите телефон\n";}

				if(string.IsNullOrEmpty(_3passTextField.Text))
				{
					msg +="Введите фамилию\n";
				}
				else{
					if(_3passTextField.Text != _3passAgainTextField.Text){
						msg +="Пароли не совпадают\n";
					}
				}


				if(string.IsNullOrEmpty(_3cityTextField.Text)){msg +="Укажите город\n";}
				if(string.IsNullOrEmpty(_3markaTF.Text)){msg +="Введите марку\n";}
				if(string.IsNullOrEmpty(_3modelTextField.Text)){msg +="Введите модель\n";}
				if(string.IsNullOrEmpty(_3autonumberTextField.Text)){msg +="Введите номер\n";}
				if(string.IsNullOrEmpty(_3colorTextField.Text)){msg +="Укажите цвет\n";}
				if(string.IsNullOrEmpty(ImagePath)){msg +="Выберите фотографию\n";}
				if(_3agreeButton.Tag==0){msg +="Необходимо принять пользовательское соглашение\n";}

				if(!string.IsNullOrEmpty(msg)){
					var alert = new UIAlertView("Уведомление","Заполните следующие поля:\n" + msg, null,"ок");
					alert.Show();
					return;
				}

				Taxi taxi = new Taxi {
					TaxtFirstname = _3nameTextField.Text,
					TaxiLastname = _3surnameTextField.Text,
					TaxiPhone = _3phoneTextField.Text,
					TaxiPassword = _3passTextField.Text,
					TaxiMarka = _3markaTF.Text,
					TaxiModel = _3modelTextField.Text,
					TaxiCarnumber = _3autonumberTextField.Text,
					TaxiColor = _3colorTextField.Text,
					City = new City{ CityId = SelCity.Id, CityName = "Костанай" }
				};

				Dictionary<string,string> files = new Dictionary<string, string>();
				files.Add("file",ImagePath);

				int status = AppDelegate.API.Taxi.Register (taxi,files);
				if(status==200){
					var vController = (AppDelegate.Storyboard.InstantiateViewController ("RetryCodeViewController") as UIViewController);
					this.NavigationController.PushViewController (vController, true);
				}else{
					var alert = new UIAlertView("Ошибка","Проверьте корректность ваших данных и попробуйте еще раз", null,"Ок");
					alert.Show();
				}
			};
			#endregion

		}

		public void SetupColorPicker()
		{
			PickerModel model = new PickerModel(Colors);
			model.PickerChanged += (sender, e) => {
				try{
				SelColor = e.SelectedValue;
				}catch{}
			};

			UIPickerView picker = new UIPickerView(new RectangleF(0,0,320,0));
			picker.ShowSelectionIndicator = true;
			picker.Model = model;
			picker.BackgroundColor = UIColor.White;


			UIToolbar toolbar = new UIToolbar(new RectangleF(0,0,320, 0));
			toolbar.BarStyle = UIBarStyle.Default;
			toolbar.SizeToFit();
			toolbar.BackgroundColor = UIColor.White;
			toolbar.BarTintColor = AppDelegate.AppColorYellow;


			UIBarButtonItem flexibleSpace = new UIBarButtonItem (UIBarButtonSystemItem.FlexibleSpace, null, null);
			UIBarButtonItem cancelButton = new UIBarButtonItem("Закрыть", UIBarButtonItemStyle.Plain,
				(s, e) => {
					_3colorTextField.ResignFirstResponder();
				}){TintColor = UIColor.White};
			UIBarButtonItem readyButton = new UIBarButtonItem("Выбрать", UIBarButtonItemStyle.Plain,
				(s, e) => {
					_3colorTextField.Text = SelColor.Name;
					_3colorTextField.ResignFirstResponder();

				}){TintColor = UIColor.White};

			toolbar.SetItems(new UIBarButtonItem[]{cancelButton,flexibleSpace,flexibleSpace,readyButton}, true);
			_3colorTextField.InputView = picker;
			_3colorTextField.InputAccessoryView = toolbar;
		}

		public void SetupCityPicker()
		{
			PickerModel model = new PickerModel(Cities);
			model.PickerChanged += (sender, e) => {
				try{
					SelCity = e.SelectedValue;
				}catch{}
			};

			UIPickerView picker = new UIPickerView(new RectangleF(0,0,320,0));
			picker.ShowSelectionIndicator = true;
			picker.Model = model;
			picker.BackgroundColor = UIColor.White;


			UIToolbar toolbar = new UIToolbar(new RectangleF(0,0,320, 0));
			toolbar.BarStyle = UIBarStyle.Default;
			toolbar.SizeToFit();
			toolbar.BackgroundColor = UIColor.White;
			toolbar.BarTintColor = AppDelegate.AppColorYellow;


			UIBarButtonItem flexibleSpace = new UIBarButtonItem (UIBarButtonSystemItem.FlexibleSpace, null, null);
			UIBarButtonItem cancelButton = new UIBarButtonItem("Закрыть", UIBarButtonItemStyle.Plain,
				(s, e) => {
					_3cityTextField.ResignFirstResponder();
				}){TintColor = UIColor.White};
			UIBarButtonItem readyButton = new UIBarButtonItem("Выбрать", UIBarButtonItemStyle.Plain,
				(s, e) => {
					_3cityTextField.Text = SelCity.Name;
					_3cityTextField.ResignFirstResponder();

				}){TintColor = UIColor.White};

			toolbar.SetItems(new UIBarButtonItem[]{cancelButton,flexibleSpace,flexibleSpace,readyButton}, true);
			_3cityTextField.InputView = picker;
			_3cityTextField.InputAccessoryView = toolbar;
		}

		public override void ViewWillAppear (bool animated)
		{
			this.NavigationController.NavigationBar.Hidden = true;
			base.ViewWillAppear (animated);
		}

		private void AttachAnimation(UIView v, int index){

			UITapGestureRecognizer gestureRecognizer = new UITapGestureRecognizer(()=>{
				double time = 0;


				switch (index) {
				case 0:
					time = 0.5;
					UIView.Animate(	
						time, 
						0d,
						UIViewAnimationOptions.BeginFromCurrentState,
						Action1,
						()=>{
							MainViewController.NavPage = 1;
							this.NavigationController.PopViewControllerAnimated (false);
						});
					break;
				case 1:
					time = 0.5;
					UIView.Animate(
						time, 
						0d,
						UIViewAnimationOptions.BeginFromCurrentState,
						Action2,
						()=>{
							MainViewController.NavPage = 2;
							this.NavigationController.PopViewControllerAnimated (false);
						});
					break;
				case 2:
					time = 0.5;
					UIView.Animate(
						time, 
						0d,
						UIViewAnimationOptions.BeginFromCurrentState,
						Action3,
						()=>{
							MainViewController.NavPage = 3;
							this.NavigationController.PopViewControllerAnimated (false);
						});

					break;
				}

			});

			gestureRecognizer.AddTarget (() => View.EndEditing (true));
			gestureRecognizer.CancelsTouchesInView = false;
			v.AddGestureRecognizer (gestureRecognizer);
		}

		private void Action1(){
			_view1.Frame = new RectangleF (0, 0, this.View.Frame.Width, 380);
			_view2.Frame = new RectangleF(0,380,this.View.Frame.Width,94);
			_view3.Frame = new RectangleF (0, 474, this.View.Frame.Width, 94);
		}

		private void Action2(){
			_view1.Frame = new RectangleF (0, 0, this.View.Frame.Width, 94);
			_view2.Frame = new RectangleF (0, 94, this.View.Frame.Width, 380);
			_view3.Frame = new RectangleF (0, 474, this.View.Frame.Width, 94);
		}

		private void Action3(){
			_view1.Frame = new RectangleF (0, 0, this.View.Frame.Width, 94);
			_view2.Frame = new RectangleF (0, 94, this.View.Frame.Width, 94);
			_view3.Frame = new RectangleF (0, 188, this.View.Frame.Width, 1500);
		}
	
		#region PhotoFromGallery
		private void PhotoFromGallery(){
			imagePicker = new UIImagePickerController ();
			imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;
			imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes (UIImagePickerControllerSourceType.PhotoLibrary);

			imagePicker.FinishedPickingMedia += Handle_FinishedPickingMedia;
			imagePicker.Canceled += Handle_Canceled;

			NavigationController.PresentModalViewController(imagePicker, true);
		}

		private void Handle_FinishedPickingMedia (object sender, UIImagePickerMediaPickedEventArgs e)
		{
			bool isImage = false;
			switch(e.Info[UIImagePickerController.MediaType].ToString()) {
			case "public.image":
				Console.WriteLine("Image selected");
				isImage = true;
				break;
			case "public.video":
				Console.WriteLine("Video selected");
				break;
			}

			if (!isImage) {
				imagePicker.DismissModalViewControllerAnimated (true);
				var alert = new UIAlertView("Предупреждение","Выбрать можно только картинку", null,"Ок");
				alert.Show();
				//BTProgressHUD.ShowErrorWithStatus ("Only images are allowed");
				return;
			}

			var photo = e.Info[new NSString("UIImagePickerControllerOriginalImage")] as UIImage;
			var documentsDirectory = Environment.GetFolderPath
				(Environment.SpecialFolder.Personal);
			string jpgFilename = System.IO.Path.Combine (documentsDirectory, "camera.jpg"); // hardcoded filename, overwritten each time
			NSData imgData = photo.AsJPEG();
			NSError err = null;
			if (imgData.Save(jpgFilename, false, out err)) {
				//orientation = "0";
				ImagePath = jpgFilename;
				ImagePath = UIImageHelper.SaveAndResize(UIImage.FromFile (ImagePath), 128,128);
				//shouldUpdateAvatar=true;
				_3carImage.Image = UIImage.FromFile (ImagePath);
				//Console.WriteLine("saved as " + jpgFilename);
			} else {
				//Console.WriteLine("nOT saved as " + jpgFilename + " because" + err.LocalizedDescription);
			}

			// dismiss the picker
			imagePicker.DismissModalViewControllerAnimated (true);
		}

		private void Handle_Canceled (object sender, EventArgs e) {
			imagePicker.DismissModalViewControllerAnimated(true);
		}
		#endregion
	}
}

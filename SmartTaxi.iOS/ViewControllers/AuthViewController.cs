// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Collections.Generic;
using System.Drawing;


namespace SmartTaxi.iOS
{
	public partial class AuthViewController : UIViewController
	{
		private UIButton btnClose;
		private List<MenuItem> menuItems;

		public AuthViewController (IntPtr handle) : base (handle)
		{

		}

		public override void ViewDidLoad ()
		{
			this.View.BackgroundColor = UIColor.FromRGB(255,216,0);


			menuItems = new List<MenuItem> { 
				new MenuItem{ Name = "Авторизация", ImageName = "id.png", Color = UIColor.FromRGB (255, 216, 0) },
				new MenuItem{ Name = "Забыли пароль", ImageName = "forget.png", Color = UIColor.FromRGB (255, 204, 0) },
				new MenuItem{ Name = "Регистрация", ImageName = "register.png", Color = UIColor.FromRGB (255, 185, 1) }
			};

			int index = 0;
			foreach (var v in this.scrollView.Subviews) {
				if (v.GetType() != typeof(UIImageView)) {
					if (index < menuItems.Count) {
						v.BackgroundColor = this.menuItems [index].Color;
						(v.Subviews [0] as UIImageView).Image = UIImage.FromBundle ("Menu/" + this.menuItems [index].ImageName);
						(v.Subviews [0] as UIImageView).ContentMode = UIViewContentMode.ScaleToFill;
						(v.Subviews [1] as UITextField).Text = this.menuItems [index].Name;
						(v.Subviews [1] as UITextField).Font = UIFont.FromName (AppDelegate.FontRobotoCondensedLight,25f);
						(v.Subviews [1] as UITextField).TextColor = UIColor.FromRGB (50, 50, 50);

						AttachAnimation (v, index);
						index++;
					}
				}
			}

			this.btnClose = UIButton.FromType (UIButtonType.Custom);
			this.btnClose.SetImage (UIImage.FromBundle ("Common/close.png"), UIControlState.Normal);
			this.btnClose.TouchUpInside += (sender, e) => {
				var vController = (AppDelegate.Storyboard.InstantiateViewController ("AuthViewController") as AuthViewController);
				this.NavigationController.PushViewController (vController, false);
			};

			this.View.AddSubview (this.btnClose);


		}


		public override void ViewWillAppear (bool animated)
		{
			this.NavigationController.NavigationBar.Hidden = true;
			base.ViewWillAppear (animated);
		}

		private void AttachAnimation(UIView v, int index){
			UITapGestureRecognizer gestureRecognizer = new UITapGestureRecognizer(()=>{
				foreach (var v2 in this.View.Subviews){
					v2.Frame = new RectangleF(0,-100,0,0);
				}

//				int prevIndex = index - 1;
//				if(prevIndex>=0){
//					var prevView = this.View.Subviews.ElementAt(prevIndex);
//					this.View.BackgroundColor = prevView.BackgroundColor;
//				}

				double time = 0.5;
				if(index==0)time = 0;
				if(index==0)time = 0.2d;

				//show views
				if(index<=3){
					UIView.Animate(time, 0d,
						UIViewAnimationOptions.BeginFromCurrentState,
						() => v.Frame = new RectangleF(0,0,320, this.View.Frame.Height),
						() => 
						{
							HandleView(v,index);
						});
				}
			});
			gestureRecognizer.CancelsTouchesInView = true;
			v.AddGestureRecognizer (gestureRecognizer);
		}

		private void HandleView(UIView v, int index){
			switch (index) {
			case 0:
				v.AddSubview (new AuthLoginView (new RectangleF (0, 90, v.Frame.Width, v.Frame.Height - 90), this));
				break;
			case 1:
				v.AddSubview (new RestorePassView (new RectangleF(0,90,v.Frame.Width,v.Frame.Height - 90)));
				break;
			case 2:
				v.AddSubview (new RegistrationView (new RectangleF(0,90,v.Frame.Width,v.Frame.Height - 90)));
				break;
			}
			v.RemoveGestureRecognizer (v.GestureRecognizers [0]);

			UITapGestureRecognizer gestureRecognizer = new UITapGestureRecognizer ();
			gestureRecognizer.AddTarget (() => v.EndEditing (true));
			gestureRecognizer.CancelsTouchesInView = true;
			v.AddGestureRecognizer (gestureRecognizer);

			this.btnClose.Frame = new RectangleF (v.Frame.Width - 47, 32, 32, 32);
		}

//		private void ToDefaults(){
//			this.btnClose.Frame = new RectangleF(0,0,0,0);
//
//			int index = 0;
//
//			foreach (var v in this.View.Subviews) {
//				if (v.GetType ()== typeof(UIView)) {
//					v.Frame = new RectangleF (0, index * 90, this.View.Frame.Width, 90);
//					index ++;
//					foreach (var v2 in v.Subviews.Where(a=>a.Subviews.Count()>1)){
//						//if (v2.GetType() == typeof(UIView)) {
//							v2.RemoveFromSuperview ();
//						//}
//					}
//				}
//			}
//
//			this.View.BackgroundColor = UIColor.FromRGB(255,216,0);
//		}
	}
}
